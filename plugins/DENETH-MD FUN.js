const { cmd } = require('../command');
const axios = require('axios');

cmd({
    pattern: "hack",
    desc: "Displays a dynamic and playful 'Hacking' message for fun.",
    category: "fun",
    react: "üíª",
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        const steps = [
            'üíª *HACK STARTING...* üíª',
            '',
            '*Initializing hacking tools...* üõ†Ô∏è',
            '*Connecting to remote servers...* üåê',
            '',
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 10%``` ‚è≥'                                            ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 20%``` ‚è≥'                                   ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 30%``` ‚è≥'                               ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 40%``` ‚è≥'                            ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 50%``` ‚è≥'                       ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 60%``` ‚è≥'                 ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 70%``` ‚è≥'            ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 80%``` ‚è≥'        ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 90%``` ‚è≥'    ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 100%``` ‚úÖ',
            '',
            'üîí *System Breach: Successful!* üîì',
            'üöÄ *Command Execution: Complete!* üéØ',
            '',
            '*üì° Transmitting data...* üì§',
            '_üïµÔ∏è‚Äç‚ôÇÔ∏è Ensuring stealth..._ ü§´',
            '*üîß Finalizing operations...* üèÅ',
            '',
            '‚ö†Ô∏è *Note:* All actions are for demonstration purposes only.',
            '‚ö†Ô∏è *Reminder:* Ethical hacking is the only way to ensure security.',
            '',
            '> *DENETH-MD HACKING COMPLETE ‚ò£*'
        ];

        for (const line of steps) {
            await conn.sendMessage(from, { text: line }, { quoted: mek });
            await new Promise(resolve => setTimeout(resolve, 1000)); // Adjust the delay as needed
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error:* ${e.message}`);
    }
});

cmd({
    pattern: "joke",
    desc: "üòÇ Get a random joke",
    react: "ü§£",
    category: "fun",
    filename: __filename
},
async (conn, mek, m, { from, q, reply }) => {
    try {
        const url = 'https://official-joke-api.appspot.com/random_joke';  // API for random jokes
        const response = await axios.get(url);
        const joke = response.data;

        const jokeMessage = `
üòÇ *Here's a random joke for you!* üòÇ

*${joke.setup}*

${joke.punchline} üòÑ

> ·¥Ö·¥á…¥·¥á·¥õ ú-·¥ç·¥Ö  ô è ·¥ã…™…¥…¢ X ·¥Ö·¥á…¥·¥á·¥õ ú·¥Ö·¥á·¥†¬Æ`;

        return reply(jokeMessage);
    } catch (e) {
        console.log(e);
        return reply("‚ö†Ô∏è Couldn't fetch a joke right now. Please try again later.");
    }
});

cmd({
    pattern: "dog",
    desc: "Fetch a random dog image.",
    category: "fun",
    react: "üê∂",
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        const apiUrl = `https://dog.ceo/api/breeds/image/random`;
        const response = await axios.get(apiUrl);
        const data = response.data;

        await conn.sendMessage(from, { image: { url: data.message }, caption: 'üê∂ *Random Dog Image* üê∂\n> ·¥Ö·¥á…¥·¥á·¥õ ú-·¥ç·¥Ö  ô è ·¥ã…™…¥…¢ X ·¥Ö·¥á…¥·¥á·¥õ ú·¥Ö·¥á·¥†¬Æ' }, { quoted: mek });
    } catch (e) {
        console.log(e);
        reply(`Error fetching dog image: ${e.message}`);
    }
});

cmd({
    pattern: "fact",
    desc: "üß† Get a random fun fact",
    react: "ü§ì",
    category: "fun",
    filename: __filename
},
async (conn, mek, m, { from, q, reply }) => {
    try {
        const url = 'https://uselessfacts.jsph.pl/random.json?language=en';  // API for random facts
        const response = await axios.get(url);
        const fact = response.data.text;

        const funFact = `
üß† *Random Fun Fact* üß†

${fact}

Isn't that interesting? üòÑ

> ·¥Ö·¥á…¥·¥á·¥õ ú-·¥ç·¥Ö  ô è ·¥ã…™…¥…¢ X ·¥Ö·¥á…¥·¥á·¥õ ú·¥Ö·¥á·¥†¬Æ`;

        return reply(funFact);
    } catch (e) {
        console.log(e);
        return reply("‚ö†Ô∏è An error occurred while fetching a fun fact. Please try again later.");
    }
});
